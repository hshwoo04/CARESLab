//bubble sort
//# Execution begins at address 0

//@000							// init:  @ address 0				
//0//30f40003000000000000		//		  irmovq Stack    , %rsp  	# Set up Stack pointer  
//10//30f50003000000000000		//		  irmovq Stack    , %rbp  	# Set up base pointer   
//20//706000000000000000		//		  jmp    Main				# Execute main program
//29// 

//# Array of 6 elements

//.align 8 	
//@004							// array:  @ address 32
//32//dddd000000000000			//		  .quad 0xdddd				# These values should get sorted
//40//eeee000000000000			//		  .quad 0xeeee
//48//bbbb000000000000			//		  .quad 0xbbbb
//56//aaaa000000000000			// 		  .quad 0xaaaa
//64//ffff000000000000			// 		  .quad 0xffff
//72//cccc000000000000			// 		  .quad 0xcccc
//80//0101000000000000			// 		  .quad 0x0101				# This value should not change


//@00c 							// Main:  @ address 96
//96//30f00600000000000000		//		  irmovq $6       , %rax	
//106//a00f						//		  pushq  %rax				# Push 6
//108//30f22000000000000000		//		  irmovq array    , %rdx
//118//a02f						//		  pushq  %rdx      			# Push array
//120//80f000000000000000		//		  call   Bubble				# Bubble(array, 6)
//129//b03f						//		  popq   %rbx				# rbx = array
//131//30f32000000000000000		//		  irmovq array    , %rbx
//141//30f00100000000000000		//		  irmovq $1       , %rax
//151//30f10400000000000000		//		  irmovq $8       , %rcx
//161//30f20500000000000000		//		  irmovq $5       , %rdx
//						        // resultCheck :
//171//50730000000000000000		//		  mrmovq (%rbx)   , %rdi	# rdi = a[i]
//181//50630800000000000000		//		  mrmovq 8(%rbx)  , %rsi	# rsi = a[i+1]
//191//6167						//		  subq	 %rsi     , %rdi	# a[i+1] - a[i]
//193//76e100000000000000		//		  jmpG	 fin				# if order is reversed, go fail routine
//202//6013						//		  addq 	 %rcx     , %rbx  	# i++
//204//6102						//		  subq	 %rax     , %rdx  	# count--
//206//76ab00000000000000		//		  jmpG	 resultCheck 	    # if(!count <= 0) goto resultCheck
//							    // Passed :
//215//30f00000000000000000		//		  irmovq $0       , %rax
//							    // fin :
//225//c00e						//		  mtc0   $rax     , 0xe
					
//# void Bubble(int *data, int count)

//@01e							// Bubble: @ address 240
//240//a05f						//		  pushq  %rbp
//242//2045						//	      rrmovq %rsp     , %rbp
//244//a03f						//		  pushq  %rbx				# Save registers
//246//a06f						//		  pushq  %rsi
//248//a07f						//		  pushq  %rdi
//250//50151000000000000000		//	      mrmovq 16(%rbp)  , %rcx 	# rcx = data (== array??)
//260//50051800000000000000		//		  mrmovq 24(%rbp) , %rax	# rdx = count
//270//6000						//		  addq   %rax     , %rax
//272//6000						//		  addq   %rax     , %rax	#  
//274//6000						//		  addq   %rax     , %rax	# 8*count 
//276//6010						//		  addq   %rcx     , %rax	# rax = p_end
//278//a00f						//		  pushq  %rax				# Store p_end at (%rsp)
//280//30f20800000000000000		//		  irmovq $8       , %rdx
//290//6012						//		  addq   %rcx     , %rdx	# rdx = p_next
//292//6120						//		  subq   %rdx     , %rax	# p_end - p_next
//294//71ac01000000000000		//		  jle    Done				# if(p_end - p_next<=0) goto done
//303//2023						// Loop1: rrmovq %rdx     , %rbx	 
//305//30f00800000000000000		//		  irmovq $8       , %rax
//315//6103						//		  subq   %rax     , %rbx	# p = p_next-1 ( p == current)
//317//50730000000000000000		// Loop2: mrmovq (%rbx)   , %rdi	# r = *p
//327//50630800000000000000		//		  mrmovq 8(%rbx)  , %rsi	# s = *(p+1)
//337//2060						//		  rrmovq %rsi     , %rax

//  $begin bubble-r-swap-ys
//339//6170						//		  subq   %rdi     , %rax	# s-r
//341//757201000000000000		//		  jge    Skip				# Skip if s >= r
								//		  							# swap
//350//40630000000000000000		//		  rmmovq %rsi     , (%rbx)	# *p = s
//360//40730800000000000000		//		  rmmovq %rdi     , 8(%rbx)	# *(p+1) = r
// 	$end bubble-r-swap-ys
//								// Skip:
//370//30f00800000000000000		//		  irmovq $8       , %rax
//380//6103						//		  subq   %rax     , %rbx	# p--
//382//2030						//		  rrmovq %rbx     , %rax
//384//6110						//		  subq   %rcx     , %rax	# p - data
//386//753d01000000000000		//		  jge    Loop2
//395//30f00800000000000000		//		  irmovq $8       , %rax
//405//6002						//		  addq   %rax     , %rdx	# p_next++
//407//50040000000000000000		//		  mrmovq (%rsp)   , %rax    # p_end
//417//6120						//		  subq   %rdx     , %rax	# p_end - p_next
//419//762f01000000000000		//		  jg     Loop1
								// Done:
//428//b00f						//		  popq   %rax				# Deallocate stack space
//430//b07f						//		  popq   %rdi				# Restore registers
//432//b06f						//		  popq   %rsi
//434//b03f						//		  popq   %rbx
//436//2054						//		  rrmovq %rbp     , %rsp
//438//b05f						//		  popq   %rbp
//440//90						//		  ret
//341//
								// .pos 0x300	= address 768
								// Stack:							# The stack goes here and grows to lower addresses
								// * $end bubble-r-solve-ys */

// Dumped Result

@000
30f4000300000000
000030f500030000
0000000070600000
0000000000000000
@004
dddd000000000000
eeee000000000000
bbbb000000000000
aaaa000000000000
ffff000000000000
cccc000000000000
0101000000000000
@00c
30f0060000000000
0000a00f30f22000
000000000000a02f
80f0000000000000
00b03f30f3200000
000000000030f001
0000000000000030
f108000000000000
0030f20500000000
0000005073000000
0000000000506308
0000000000000061
6776e10000000000
00006013610276ab
0000000000000030
f000000000000000
00c00e0000000000
@01e
a05f2045a03fa06f
a07f501510000000
0000000050051800
0000000000006000
600060006010a00f
30f2080000000000
00006012612071ac
0100000000000020
2330f00800000000
0000006103507300
0000000000000050
6308000000000000
0020606170757201
0000000000004063
0000000000000000
4073080000000000
000030f008000000
0000000061032030
6110753d01000000
00000030f0080000
0000000000600250
0400000000000000
006120762f010000
00000000b00fb07f
b06fb03f2054b05f
9000000000000000